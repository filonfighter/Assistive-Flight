from machine import Pin, SPI, PWM # type: ignore
import framebuf # type: ignore
import time
import network
import urequests
import math

# Konfiguracja Wi-Fi
SSID = 'biuro'
PASSWORD = '8521Morek14'

# Konfiguracja ThingSpeak
CHANNEL_ID = '2553609'
READ_API_KEY = 'ZSALT2L6973X8QNU'
THINGSPEAK_URL = 'https://api.thingspeak.com/channels/{}/feeds/last.json?api_key={}'.format(CHANNEL_ID, READ_API_KEY)

BL = 13
DC = 7
RST = 12
MOSI = 11
SCK = 10
CS = 9

delay = 0

def connect_wifi(ssid, password):
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print('Łączenie z siecią WiFi...')
        wlan.connect(ssid, password)
        while not wlan.isconnected():
            pass
    print('Połączono z siecią WiFi:', ssid)

def get_data_from_thingspeak():
    try:
        response = urequests.get(THINGSPEAK_URL)
        data = response.json()
        response.close()
        return data
    except Exception as e:
        print('Błąd podczas pobierania danych z ThingSpeak:', e)
        return None

def main():
    connect_wifi(SSID, PASSWORD)
    return
        

class LCD_1inch14(framebuf.FrameBuffer):
    def __init__(self):
        self.width = 240
        self.height = 135
        
        self.cs = Pin(CS,Pin.OUT)
        self.rst = Pin(RST,Pin.OUT)
        
        self.cs(1)
        self.spi = SPI(1)
        self.spi = SPI(1,1000_000)
        self.spi = SPI(1,10000_000,polarity=0, phase=0,sck=Pin(SCK),mosi=Pin(MOSI),miso=None)
        self.dc = Pin(DC,Pin.OUT)
        self.dc(1)
        self.buffer = bytearray(self.height * self.width * 2)
        super().__init__(self.buffer, self.width, self.height, framebuf.RGB565)
        self.init_display()
        
        self.red   =   0x07E0
        self.green =   0x001f
        self.blue  =   0xf800
        self.white =   0xffff
        
    def write_cmd(self, cmd):
        self.cs(1)
        self.dc(0)
        self.cs(0)
        self.spi.write(bytearray([cmd]))
        self.cs(1)

    def write_data(self, buf):
        self.cs(1)
        self.dc(1)
        self.cs(0)
        self.spi.write(bytearray([buf]))
        self.cs(1)

    def init_display(self):
        """Initialize dispaly"""  
        self.rst(1)
        self.rst(0)
        self.rst(1)
        
        self.write_cmd(0x36)
        self.write_data(0x70)

        self.write_cmd(0x3A) 
        self.write_data(0x05)

        self.write_cmd(0xB2)
        self.write_data(0x0C)
        self.write_data(0x0C)
        self.write_data(0x00)
        self.write_data(0x33)
        self.write_data(0x33)

        self.write_cmd(0xB7)
        self.write_data(0x35) 

        self.write_cmd(0xBB)
        self.write_data(0x19)

        self.write_cmd(0xC0)
        self.write_data(0x2C)

        self.write_cmd(0xC2)
        self.write_data(0x01)

        self.write_cmd(0xC3)
        self.write_data(0x12)   

        self.write_cmd(0xC4)
        self.write_data(0x20)

        self.write_cmd(0xC6)
        self.write_data(0x0F) 

        self.write_cmd(0xD0)
        self.write_data(0xA4)
        self.write_data(0xA1)

        self.write_cmd(0xE0)
        self.write_data(0xD0)
        self.write_data(0x04)
        self.write_data(0x0D)
        self.write_data(0x11)
        self.write_data(0x13)
        self.write_data(0x2B)
        self.write_data(0x3F)
        self.write_data(0x54)
        self.write_data(0x4C)
        self.write_data(0x18)
        self.write_data(0x0D)
        self.write_data(0x0B)
        self.write_data(0x1F)
        self.write_data(0x23)

        self.write_cmd(0xE1)
        self.write_data(0xD0)
        self.write_data(0x04)
        self.write_data(0x0C)
        self.write_data(0x11)
        self.write_data(0x13)
        self.write_data(0x2C)
        self.write_data(0x3F)
        self.write_data(0x44)
        self.write_data(0x51)
        self.write_data(0x2F)
        self.write_data(0x1F)
        self.write_data(0x1F)
        self.write_data(0x20)
        self.write_data(0x23)
        
        self.write_cmd(0x21)

        self.write_cmd(0x11)

        self.write_cmd(0x29)

    black = 0x0000

    def show(self):
        self.write_cmd(0x2A)
        self.write_data(0x00)
        self.write_data(0x28)
        self.write_data(0x01)
        self.write_data(0x17)
        
        self.write_cmd(0x2B)
        self.write_data(0x00)
        self.write_data(0x35)
        self.write_data(0x00)
        self.write_data(0xBB)
        
        self.write_cmd(0x2C)
        
        self.cs(1)
        self.dc(1)
        self.cs(0)
        self.spi.write(self.buffer)
        self.cs(1)
    
    def draw_thick_line(self, x0, y0, length, angle, color, thickness):
        """Draw a thick line at a given angle."""
        for i in range(thickness):
            x1 = x0 + length * math.cos(angle) + i
            y1 = y0 + length * math.sin(angle) + i
            self.line(round(x0), round(y0), round(x1), round(y1), color)
            
    def clear(self):
        """Wyczyść ekran, zapełniając cały bufor kolorem czarnym."""
        self.fill(0x0000)  # Czarny kolor

    def draw_thick_arrow(self, x, y, length, angle, color, thickness):
        """Draw a thick arrow."""
        for i in range(thickness):
            x0 = x - length * math.cos(angle) / 2 + i
            y0 = y - length * math.sin(angle) / 2 + i
            x1 = x + length * math.cos(angle) / 2 + i
            y1 = y + length * math.sin(angle) / 2 + i
            self.draw_thick_line(x0, y0, length, angle, color, thickness)  # shaft
            self.draw_thick_line(x1, y1, length / 3, angle - 5 * math.pi / 6, color, thickness)  # arrowhead
            self.draw_thick_line(x1, y1, length / 3, angle + 5 * math.pi / 6, color, thickness)  # arrowhead

    
    
if __name__=='__main__':
    LCD = LCD_1inch14()
    main()
    angle = 0  # initialize angle

    while(1):
        LCD.fill(LCD.black)
        data = get_data_from_thingspeak()
        if data and 'field1' in data:
            field1_value = data['field1']
            print('Wartość pola field1:', field1_value)
            # Tutaj możesz umieścić kod do przetwarzania wartości pola field1
        times = int(field1_value)
        if times > 0:
            LCD.clear()
            print("Bardziej cool")
            times2 = str(times)
            text = times2
            text_width = len(text) * 8  # assuming each character is 8 pixels wide
            LCD.text(text, round((LCD.width - text_width) / 2), 70, LCD.blue)
            #LCD.show()
            text = "Remaining time to enter:"
            text_width = len(text) * 8  # assuming each character is 8 pixels wide
            LCD.text(text, round((LCD.width - text_width) / 2), 40, LCD.blue)
            #LCD.show()
            text = "minutes"
            text_width = len(text) * 8  # assuming each character is 8 pixels wide
            LCD.text(text, round((LCD.width - text_width) / 2), 80, LCD.blue)
            text = "Flight delayed"
            text_width = len(text) * 8  # assuming each character is 8 pixels wide
            if delay == 1:
                LCD.text(text, round((LCD.width - text_width) / 2), 100, LCD.red)
            LCD.show()
            time.sleep(0.1)
        elif times <= 0:
            print("cool")
            text = "Gate 1"
            text_width = len(text) * 8  # assuming each character is 8 pixels wide
            LCD.text(text, round((LCD.width - text_width) / 2), 10, LCD.blue)  # place text in the middle top of the screen
            LCD.draw_thick_arrow(round(LCD.width / 2), round(LCD.height / 2), 75, angle, LCD.blue, 3)
            LCD.show()
            time.sleep(0.1)
            
        
        angle += math.pi / 30  # rotate by 6 degrees
        
